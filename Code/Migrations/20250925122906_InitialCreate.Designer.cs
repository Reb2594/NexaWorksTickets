// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NexaWorksTickets.Code.Data;


#nullable disable

namespace NexaWorksTickets.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250925122906_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.Os", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Os");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Linux"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MacOS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Windows"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Android"
                        },
                        new
                        {
                            Id = 5,
                            Name = "iOS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Windows Mobile"
                        });
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Trader en Herbe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Maître des Investissements"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Planificateur d’Entraînement"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Planificateur d’Anxiété Sociale"
                        });
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.ProductVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "Number")
                        .IsUnique();

                    b.ToTable("Versions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = "1.0",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            Number = "1.1",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            Number = "1.2",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 4,
                            Number = "1.3",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 5,
                            Number = "1.0",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 6,
                            Number = "2.0",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 7,
                            Number = "2.1",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 8,
                            Number = "1.0",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 9,
                            Number = "1.1",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 10,
                            Number = "2.0",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 11,
                            Number = "1.0",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 12,
                            Number = "1.1",
                            ProductId = 4
                        });
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Résolu"
                        },
                        new
                        {
                            Id = 2,
                            Name = "En cours"
                        });
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("VersionOsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("VersionOsId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.VersionOs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("OsId")
                        .HasColumnType("int");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OsId");

                    b.HasIndex("VersionId", "OsId")
                        .IsUnique();

                    b.ToTable("Version_Os");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            OsId = 1,
                            VersionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            OsId = 3,
                            VersionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            OsId = 1,
                            VersionId = 2
                        },
                        new
                        {
                            Id = 4,
                            Available = true,
                            OsId = 2,
                            VersionId = 2
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            OsId = 3,
                            VersionId = 2
                        },
                        new
                        {
                            Id = 6,
                            Available = true,
                            OsId = 1,
                            VersionId = 3
                        },
                        new
                        {
                            Id = 7,
                            Available = true,
                            OsId = 2,
                            VersionId = 3
                        },
                        new
                        {
                            Id = 8,
                            Available = true,
                            OsId = 3,
                            VersionId = 3
                        },
                        new
                        {
                            Id = 9,
                            Available = true,
                            OsId = 4,
                            VersionId = 3
                        },
                        new
                        {
                            Id = 10,
                            Available = true,
                            OsId = 5,
                            VersionId = 3
                        },
                        new
                        {
                            Id = 11,
                            Available = true,
                            OsId = 6,
                            VersionId = 3
                        },
                        new
                        {
                            Id = 12,
                            Available = true,
                            OsId = 2,
                            VersionId = 4
                        },
                        new
                        {
                            Id = 13,
                            Available = true,
                            OsId = 3,
                            VersionId = 4
                        },
                        new
                        {
                            Id = 14,
                            Available = true,
                            OsId = 4,
                            VersionId = 4
                        },
                        new
                        {
                            Id = 15,
                            Available = true,
                            OsId = 5,
                            VersionId = 4
                        },
                        new
                        {
                            Id = 16,
                            Available = true,
                            OsId = 2,
                            VersionId = 5
                        },
                        new
                        {
                            Id = 17,
                            Available = true,
                            OsId = 5,
                            VersionId = 5
                        },
                        new
                        {
                            Id = 18,
                            Available = true,
                            OsId = 2,
                            VersionId = 6
                        },
                        new
                        {
                            Id = 19,
                            Available = true,
                            OsId = 4,
                            VersionId = 6
                        },
                        new
                        {
                            Id = 20,
                            Available = true,
                            OsId = 5,
                            VersionId = 6
                        },
                        new
                        {
                            Id = 21,
                            Available = true,
                            OsId = 2,
                            VersionId = 7
                        },
                        new
                        {
                            Id = 22,
                            Available = true,
                            OsId = 3,
                            VersionId = 7
                        },
                        new
                        {
                            Id = 23,
                            Available = true,
                            OsId = 4,
                            VersionId = 7
                        },
                        new
                        {
                            Id = 24,
                            Available = true,
                            OsId = 5,
                            VersionId = 7
                        },
                        new
                        {
                            Id = 25,
                            Available = true,
                            OsId = 1,
                            VersionId = 8
                        },
                        new
                        {
                            Id = 26,
                            Available = true,
                            OsId = 2,
                            VersionId = 8
                        },
                        new
                        {
                            Id = 27,
                            Available = true,
                            OsId = 1,
                            VersionId = 9
                        },
                        new
                        {
                            Id = 28,
                            Available = true,
                            OsId = 2,
                            VersionId = 9
                        },
                        new
                        {
                            Id = 29,
                            Available = true,
                            OsId = 3,
                            VersionId = 9
                        },
                        new
                        {
                            Id = 30,
                            Available = true,
                            OsId = 4,
                            VersionId = 9
                        },
                        new
                        {
                            Id = 31,
                            Available = true,
                            OsId = 5,
                            VersionId = 9
                        },
                        new
                        {
                            Id = 32,
                            Available = true,
                            OsId = 6,
                            VersionId = 9
                        },
                        new
                        {
                            Id = 33,
                            Available = true,
                            OsId = 2,
                            VersionId = 10
                        },
                        new
                        {
                            Id = 34,
                            Available = true,
                            OsId = 3,
                            VersionId = 10
                        },
                        new
                        {
                            Id = 35,
                            Available = true,
                            OsId = 4,
                            VersionId = 10
                        },
                        new
                        {
                            Id = 36,
                            Available = true,
                            OsId = 5,
                            VersionId = 10
                        },
                        new
                        {
                            Id = 37,
                            Available = true,
                            OsId = 2,
                            VersionId = 11
                        },
                        new
                        {
                            Id = 38,
                            Available = true,
                            OsId = 3,
                            VersionId = 11
                        },
                        new
                        {
                            Id = 39,
                            Available = true,
                            OsId = 4,
                            VersionId = 11
                        },
                        new
                        {
                            Id = 40,
                            Available = true,
                            OsId = 5,
                            VersionId = 11
                        },
                        new
                        {
                            Id = 41,
                            Available = true,
                            OsId = 2,
                            VersionId = 12
                        },
                        new
                        {
                            Id = 42,
                            Available = true,
                            OsId = 3,
                            VersionId = 12
                        },
                        new
                        {
                            Id = 43,
                            Available = true,
                            OsId = 4,
                            VersionId = 12
                        },
                        new
                        {
                            Id = 44,
                            Available = true,
                            OsId = 5,
                            VersionId = 12
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.ProductVersion", b =>
                {
                    b.HasOne("NexaWorksTickets.Models.Entities.Product", "Product")
                        .WithMany("Versions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.Ticket", b =>
                {
                    b.HasOne("NexaWorksTickets.Models.Entities.Status", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NexaWorksTickets.Models.Entities.VersionOs", "VersionOs")
                        .WithMany("Tickets")
                        .HasForeignKey("VersionOsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("VersionOs");
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.VersionOs", b =>
                {
                    b.HasOne("NexaWorksTickets.Models.Entities.Os", "Os")
                        .WithMany("VersionOs")
                        .HasForeignKey("OsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NexaWorksTickets.Models.Entities.ProductVersion", "Version")
                        .WithMany("VersionOs")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Os");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.Os", b =>
                {
                    b.Navigation("VersionOs");
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.Product", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.ProductVersion", b =>
                {
                    b.Navigation("VersionOs");
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.Status", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("NexaWorksTickets.Models.Entities.VersionOs", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
